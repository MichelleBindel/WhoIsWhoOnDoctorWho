# load all csv files
scriptsData <- read_csv("datasets/all-scripts.csv")
library(plyr)
library(dplyr)
library(tidyverse)
# load all csv files
scriptsData <- read_csv("datasets/all-scripts.csv")
imdbData <- read_csv("datasets/imdb_details.csv")
# normalize season number according to script data
imdbData$season[imdbData$season == 1] <- 27
imdbData$season[imdbData$season == 2] <- 28
imdbData$season[imdbData$season == 3] <- 29
imdbData$season[imdbData$season == 4] <- 30
imdbData$season[imdbData$season == 5] <- 31
imdbData$season[imdbData$season == 6] <- 32
imdbData$season[imdbData$season == 7] <- 33
imdbData$season[imdbData$season == 8] <- 34
imdbData$season[imdbData$season == 9] <- 35
imdbData$season[imdbData$season == 10] <- 36
imdbData$season[imdbData$season == 11] <- 37
imdbData <- unite(imdbData, episode, c(season, number), remove=TRUE, sep = "-")
imdbData = subset(imdbData, select = -c(title, nbr_votes, description))
scriptsData <- subset(scriptsData, doctorid>8)
#check if only doctors with id 9 and up are left
scriptsData[!duplicated(scriptsData$doctorid), ]
scriptsData2 <- scriptsData[!duplicated(scriptsData$episodeid), ]
scriptsData2 <- scriptsData2[ scriptsData2$episodeid %in% imdbData$episode, ]
scriptsData <- scriptsData[ scriptsData$episodeid %in% imdbData$episode, ]
imdbData <- imdbData[ imdbData$episode %in% scriptsData2$episodeid, ]
rm(scriptsData2)
#scale ratings to a scale of 0 to 1
imdbData["rating"] <- (imdbData["rating"]-min(imdbData["rating"]))/(max(imdbData["rating"])-min(imdbData["rating"]))
scriptsData <- subset(scriptsData, type=="talk" | type=="location")
#compress speakers like Rose and Rose [OC] and Rose [on TV] to only one node of "ROSE"
#change all "Doctor"s to their corresponding numbered Doctors
for (row in 1:nrow(scriptsData)){
doc <- scriptsData[row, "details"]
if (!is.na(doc)){
doc <- str_remove_all(toString(doc), ' \\[.+\\]| \\[.+\\}|\\+|\\d+|\\(.+\\)')
scriptsData[row, "details"]<-doc
if (doc=="DOCTOR"){
doctor <- c("DOCTOR", scriptsData[row, "doctorid"])
scriptsData[row, "details"]<-toString(doctor)
}
}
}
rm(doc); rm(doctor); rm(row)
names(imdbData)[1] <- "episodeid"
#double ratings so that low rated episodes lower the weight of the character combination and high rated episodes increase the weight
imdbData$rating <- imdbData$rating * 2
#add rating to scriptsData
scriptsData <- merge(scriptsData[, c("idx", "text", "type", "details", "episodeid", "doctorid")], imdbData, by="episodeid")
#create non-duplicate list of all characters to create node file for Gephi
charDF = distinct(na.omit(as.data.frame(scriptsData[, "details"])))
id <- rownames(charDF)
charDF <- cbind(id=id, charDF)
names(charDF)[2]<-paste("details")  # works
#rename column details to labels
colnames(charDF)[2] <- "labels"
#remove rows with characters that don't make sense
#see list with removed characters in removedChar
removedChar <- charDF[c(31, 32, 45, 75, 249, 277, 297, 550, 566, 582, 656), ]
charDF <- charDF[-c(31, 32, 45, 75, 249, 277, 297, 550, 566, 582, 656), ]
write.csv(charDF,"nodes.csv", row.names = FALSE)
#rename column labels to details
colnames(charDF)[2] <- "details"
#exchange speaker names with IDs through a lookup table (named vector)
getSpeakerID <- charDF$id
names(getSpeakerID) <- charDF$details
for (row in 1:nrow(scriptsData)) {
IDfromLUT <- scriptsData[row, "details"]
scriptsData[row, "details"] <- getSpeakerID[toString(IDfromLUT)]
}
View(removedChar)
View(removedChar)
View(removedChar)
for (row in 1:nrow(scriptsData)) {
IDfromLUT <- scriptsData[row, "details"]
scriptsData[row, "details"] <- getSpeakerID[toString(IDfromLUT)]
}
rm(IDfromLUT); rm(id); rm(getSpeakerID); rm(row)
#split dataframe to episode-dataframes
scriptData_byEpisode <- split(scriptsData, scriptsData$episodeid)
episodesList <- list()
#loop through episodes, for each episode do:
for (i in scriptData_byEpisode) {
sceneNum=0
speakersInScene<-c(i[1, "details"])
episodeID=i[1, "episodeid"]
df<-data.frame("episodeidCol"=episodeID,"sceneIdCol"=sceneNum, "idxCol"=i[1, "idx"], "nameOfSpeaker"=i[1, "details"], "rating"=i[1, "rating"])
#loop through all rows of episode i
for (row in 1:nrow(i)){
speakersInScene <- c()
#print(i[row, ])
if (i[row, "type"]=="location") { #increase scene counter
sceneNum = sceneNum+1
}
else {
speaker=i[row, "details"]
if(!(speaker %in% speakersInScene)){
df = rbind(df, data.frame(episodeidCol=episodeID,sceneIdCol=sceneNum, idxCol=i[row, "idx"], nameOfSpeaker=speaker, rating=i[row, "rating"]))
speakersInScene<-c(speakersInScene, speaker)
}
}
}
#end of Episode,add df to episodes-list
episodesList[[length(episodesList)+1]] <-df
rm(speakersInScene)
}
source('~/Documents/R/WhoIsWhoOnDoctorWho/structureScripts.R')
source('~/Documents/R/WhoIsWhoOnDoctorWho/structureScripts.R')
source('~/Documents/R/WhoIsWhoOnDoctorWho/structureScripts.R')
View(removedChar)
source('~/Documents/R/WhoIsWhoOnDoctorWho/structureScripts.R')
